<?php
/**
 * @file
 * patterns server install file.
 */

/**
 * Implements hook_install().
 * create the public://patterns_server folder.
 */
function patterns_server_install() {

  //create public://patterns_server folder.
  $public_dir_path = variable_get('file_public_path', conf_path() . '/files');
  if (!file_exists($public_dir_path . '/patterns_server')) {
    if (!drupal_mkdir($public_dir_path . '/patterns_server')) {
      drupal_set_message(st('cannot create folder in public directory, this should be caused by permission of public directory. for example "sites/default/files".'), 'error');
    }
  }

  // Check if role patterns_server_user exists
  $result = db_select('role', 'r')
    ->fields('r', array('name'))
    ->condition('name', 'patterns_server_user', '=')
    ->execute()
    ->fetchAssoc();
  if (!empty($result['name'])) {
    return;
  }
  // Otherwise creates the role
  $role = new stdClass();
  $role->name = 'patterns_server_user';
  user_role_save($role);
  $role = user_role_load_by_name('patterns_server_user');
  $role_rid = $role->rid;
  // Define our 'editor' role permissions
  $role_permissions = array(
    'administer patterns server' => TRUE,
    'view patterns server' => TRUE,
    'upload patterns server' => TRUE,
  );
  // Grant permissions to our 'editor' role
  user_role_change_permissions($role_rid, $role_permissions);
}

/**
 * Implements hook_schema().
 */
function patterns_server_schema() {
  $schema['patterns_server'] = array(
    'description' => 'Patterns server for Patterns module',
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique pattern id',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Human readable name.',
      ),
      'description' => array(
        'type' => 'text',
        'description' => 'Description of the pattern.',
      ),
      'category' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Category of the pattern.',
      ),
      'pattern' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'A serialized array containing pattern code.',
      ),
      'author' => array(
        'type' => 'varchar',
        'length' => 50,
        'description' => 'pattern\'s author',
      ),
      'uploader' => array(
        'type' => 'int',
        'length' => 50,
        'default' => 0,
        'nut null' => TRUE,
        'description' => 'pattern\'s uploader',
      ),
      'file_name' => array(
        'type' => 'varchar',
        'length' => 155,
        'not null' => TRUE,
        'description' => 'Machine readable name of this pattern.',
      ),
      'file_format' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'description' => 'Format of the patterns (XML, YAML, etc.).',
      ),
      'file_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Path of the pattern file relative to Drupal root.',
      ),
      'file_downloads' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Download Number.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'The Unix timestamp indicating when the pattern file was created.',
      ),
      'uuuid' => array(
        'type' => 'varchar',
        'length' => 50,
        'default' => '',
        'description' => 'Identify patterns and their parent',
      ),
    ),
    'primary key' => array('pid'),
    'unique keys' => array('file_name' => array('file_name')),
  );
  $schema['patterns_server_history_tree'] = array(
    'description' => 'Patterns server hitory tree',
    'fields' => array(
      'tree_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique pattern id',
      ),
      'root_pid' => array(
        'type' => 'int',
        'length' => 50,
        'default' => 0,
        'nut null' => TRUE,
        'description' => 'the pid of the pattern that is the root of tree when the tree is created',
      ),
      'root_uuuid' => array(
        'type' => 'varchar',
        'length' => 50,
        'default' => '',
        'description' => 'the uuuid of the pattern with root_pid',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'The Unix timestamp indicating when the pattern file was created.',
      ),
      'updated' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'The Unix timestamp indicating when the pattern file was updated.',
      ),
      'tree' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'A serialized array containing all children of this pattern.',
      ),
    ),
    'primary key' => array('tree_id'),
  );
  $schema['patterns_server_pattern_tree'] = array(
    'description' => 'Patterns server hitory tree',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique pattern id',
      ),
      'pid' => array(
        'type' => 'int',
        'length' => 50,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'the pid of the pattern in patterns_server table',
      ),
      'uuuid' => array(
        'type' => 'varchar',
        'length' => 50,
        'default' => '',
        'not null' => TRUE,
        'description' => 'Identify patterns and their parent',
      ),
      'tree_id' => array(
        'type' => 'int',
        'length' => 50,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'a foreign key on patterns_server_history_tree',
      ),
      'level' => array(
        'type' => 'int',
        'length' => 50,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'the level in tree',
      ),
      'updated' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'The Unix timestamp indicating when the pattern file was updated.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('pid' => array('pid'), 'uuuid' => array('uuuid')),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 *
 * 1. clean file_managed table.
 * 2. clean votingapi_vote table.
 * 3. clean all attached field.
 */
function patterns_server_uninstall() {

  //delete uploaded file, clean file_managed table.
  $query = db_select('file_managed', 'fm')
    ->fields('fm', array('fid'))
    ->condition('uri', '%' . db_like('patterns_server') . '%', 'LIKE')
    ->execute()
    ->fetchAll();
  $file_fids = array();
  foreach ($query as $fid) {
    $file_fids[] = $fid->fid;
  }
  $files = file_load_multiple($file_fids);
  foreach ($files as $file) {
    file_delete($file);
  }

  //clean votingapi_vote table.
  $num_deleted = db_delete('votingapi_vote')
    ->condition('entity_type', 'patterns_server')
    ->execute();
  $num_deleted = db_delete('votingapi_cache')
    ->condition('entity_type', 'patterns_server')
    ->execute();


  //clean all attached field.
  field_attach_delete_bundle('patterns_server', 'patterns_server');

  //delete the role.
  user_role_delete('patterns_server_user');
}
