<?php
/*
 * @file
 * Patterns Server module.
 *
 * the module'name is patterns_server.
 */

module_load_include('inc', 'patterns_server', 'theme/theme');

/**
 * Implements hook_help().
 */
function patterns_server_help($path,$arg) {
  switch ($path) {
    case "admin/help#patterns_server":
      return '<p>'.t("help for patterns_server module").'<p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function patterns_server_permission() {
  return array(
    'access patterns_server' => array(
      'title' => t('Access permission for the patterns_server module'),
      )
    );
}

/**
 * Implements hook_menu().
 *
 * the path'callback function is _patterns_server_page().
 * second: configure form page.
 */
function patterns_server_menu() {
  $items = array();  
  $items['patterns_server'] = array(
    'title' => 'Patterns Server',
    'page callback' => '_patterns_server_page',
    'access arguments' => array('access patterns_server'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['patterns_server/upload'] = array(
    'title' => 'patterns_server',
    'page callback' => 'patterns_server_upload',
    'type' => MENU_CALLBACK,
  );
  
  $items['patterns_server/download'] = array(
    'title' => 'Download Pattern Source',
    'page callback' => 'patterns_server_download',
    'access arguments' => array('get patterns'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );	 

  $items['patterns_server/info'] = array(
    'title' => 'Information of one pattern',
    'page callback' => 'patterns_server_pattern_info',
    'access arguments' => array('get patterns'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function patterns_server_get_pattern_timeDESC_from_db($num) {
  $num = is_numeric($num)?$num:10;
  $result = db_select('patterns', 'p')
                  ->fields('p', array())
                  ->orderBy('updated', 'DESC')
                  ->range(0,$num)
                  ->execute()
                  ->fetchAll();
  return $result;
}

function patterns_server_get_pattern_pid_from_db($pid) {
  $result = db_select('patterns', 'p')
                  ->fields('p', array())
                  ->condition('p.pid', $pid)
                  ->execute()
                  ->fetchAll();
  return $result;
}
/**
 * a function used in the form.
 *
 * Use Database API to retrieve the patterns from patterns table.
 */
function patterns_server_get_pattern_from_db($numOrid, $sign = TRUE) {
  if ($sign == TRUE) {
    $result = patterns_server_get_pattern_timeDESC_from_db($numOrid);
  }
  else {
    $result = patterns_server_get_pattern_pid_from_db($numOrid);
  }
  $patterns = array();

  foreach ($result as $pattern) {
    $patterns[$pattern->pid] = $pattern;
    $data = unserialize($pattern->pattern);
    $patterns[$pattern->pid]->pattern = $data;
    $patterns[$pattern->pid]->info = $data['info'];
  }

  return $patterns;
}

/**
 * hook_menu callback function.
 */
function _patterns_server_page() {
   $download_origin_times = db_select('patterns_server', 'ps')
    ->fields('ps', array('downloadnum'))
    ->condition('pid', 48)
    ->execute()
    ->fetchAssoc();
    print_r($download_origin_times['downloadnum']);
  
  //drupal_add_css(drupal_get_path('module', 'patterns_server') . '/patterns_server.css');
  //$page = '<strong>NiHao</strong>';
  $page = null;

  //Latest patterns part.
  $result = patterns_server_get_pattern_from_db(10);
  $page .= theme('patterns_server_pattern_list',array(
                    'patterns' => $result,
  ));

  //One pattern info part.
  //$result = patterns_server_get_pattern_timeDESC_from_db(1);
  //$page .= theme('patterns_server_one_pattern_info',array(
  //                  'patterns' => $result,
  //));
  //$page .= patterns_server_pattern_info();
  return $page; 
}

/**
 *
 */
function patterns_server_pattern_download($file, $filename) {
  drupal_add_http_header("Content-type", " text/plain; charset=utf-8");
  drupal_add_http_header("Content-Disposition", "attachment;filename=" . $filename);
  print $file;
  exit;
}

function patterns_server_download_recode($id) {
  $download_origin_times = db_select('patterns_server', 'ps')
    ->fields('ps', array('downloadnum', 'pid'))
    ->condition('pid', $id)
    ->execute()
    ->fetchAssoc();
  if(empty($download_origin_times['pid'])) {
    db_insert('patterns_server')
      ->fields(array(
        'pid' => $id,
        'downloadnum' => 1,
        ))
      ->execute();
  }
  else {
    $download_origin_times['downloadnum']  = $download_origin_times['downloadnum'] + 1;
  db_update('patterns_server')
    ->condition('pid', $id)
    ->fields(array(
      'downloadnum' => $download_origin_times['downloadnum'],
      ))
    ->execute();
  }
}

function patterns_server_download($id) {
  $result = db_select('patterns', 'p')
                  ->fields('p')
                  ->condition('p.pid', $id)
                  ->execute()
                  ->fetchAll();
  $result[0]->pattern = unserialize($result[0]->pattern);
  patterns_server_download_recode($id);
  patterns_server_pattern_download(file_get_contents($result[0]->file), $result[0]->name);
  exit;
}

function patterns_server_pattern_info($id) {
  drupal_add_css(drupal_get_path('module', 'patterns_server') . '/patterns_server.css');
  //@TODO the result can be a series of patterns with parents or children relation ship
  $result = patterns_server_get_pattern_from_db($id, FALSE);
  $page = theme('patterns_server_one_pattern_info',array(
                    'patterns' => $result,
  ));
  return $page;
}
