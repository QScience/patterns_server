<?php
/**
 * @file
 * Patterns Server
 *
 *
 */

module_load_include('inc', 'patterns_server', 'includes/utility');
module_load_include('inc', 'patterns_server', 'includes/search');
module_load_include('inc', 'patterns_server', 'includes/theme');
module_load_include('inc', 'patterns_server', 'includes/blocks');
module_load_include('inc', 'patterns_server', 'includes/core');
module_load_include('inc', 'patterns_server', 'includes/io');
module_load_include('module', 'votingapi', 'votingapi');

/**
 * Implements hook_entity_info().
 */
function patterns_server_entity_info() {
  $return['patterns_server'] = array(
    'label' => t('PatternsServer'),
    'base table' => 'patterns_server',
    'entity keys' => array(
      'id' => 'pid',
      'label' => 'title',
    ),
    'entity class' => 'Patterns_Server_Entity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'Patterns_Server_EntityController',
    'admin ui' => array(
      'path' => 'admin/patterns_server',
      'controller class' => 'Patterns_Server_EntityUIController',
      'file' => 'includes/patterns_server.admin.inc',
    ),
    'module' => 'patterns_server',
    'access callback' => 'patterns_server_admin_access',
    'fieldable' => TRUE,
    'bundles' => array(
      'patterns_server' => array(
        'label' => t('patterns server bundle'),
        'admin' => array(
          'path' => 'admin/patterns_server',
          'access arguments' => array('administer patterns server'),
        ),
      ),
    ),

    'view modes' => array(
      'full pattern' => array(
        'label' => t('full for pattern'),
        'custom settings' => FALSE,
      ),
      'teaser pattern' => array(
        'label' => t('teaser for pattern'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $return;
}

/**
 * accesss callback function for hook_entity_info().
 */
function patterns_server_admin_access($op, $profile = NULL, $account = NULL) {
  if (user_access('administer patterns server', $account)) {
    return TRUE;
  }
  elseif ($op == 'create' && user_access('upload patterns server', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function patterns_server_permission() {
  return array(
    'administer patterns server' => array(
      'title' => t('Administer Patterns Server'),
    ),
    'view patterns server' => array(
      'title' => t('View Patterns Server list and page'),
    ),
    'upload patterns server' => array(
      'title' => t('Upload pattern file to Patterns Server'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function patterns_server_block_info() {
  $blocks = array();
  $blocks['patterns_server_prolific_author'] = array(
    'info' => t('Most Prolific authors in Patterns Server'),
  );
  $blocks['patterns_server_hottest_tags'] = array(
    'info' => t('Hottest tags in Patterns Server'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function patterns_server_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'patterns_server_prolific_author':
      $block['subject'] = t('Most Prolific Authors:');
      $block['content'] = _patterns_server_block_most_prolific_author();
      break;
    case 'patterns_server_hottest_tags':
      $block['subject'] = t('Most Popular Tags:');
      $block['content'] = _patterns_server_block_hottest_tags();
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function patterns_server_menu() {
  $items = array();

  //main page.
  //use the $property pid of _patterns_server_list().
  $items['patterns_server_homepage'] = array(
    'title' => 'List of all patterns',
    'description' => 'the list of all patterns',
    'page callback' => '_patterns_server_all_list_page',
    'page arguments' => array(),
    'access arguments' => array('view patterns server'),
  );

  //pattern's view page. "pattern/$pid"
  //if success, go to pattern/$pid page.
  //if not(the $pid is wrong), go to the main page.
  $items['pattern/%'] = array(
    'title' => 'pattern view',
    'description' => 'pattern view page',
    'page callback' => '_patterns_server_view_page',
    'page arguments' => array(1),
    'access arguments' => array('view patterns server'),
  );

  //these two are pattern's download&voting function.
  //download: if success, download a pattern file.
  //          if not, go back to main page.
  //voting: if success, go to pattern/$pid page.
  //        if not, go back to main page.(wrong pattern/$pid will redirect to the main page.)
  $items['pattern/%/download'] = array(
    'title' => 'pattern download link',
    'description' => 'pattern download menu link',
    'page callback' => '_patterns_server_download_pattern',
    'page arguments' => array(1),
    'access arguments' => array('view patterns server'),
  );
  $items['pattern/%/voting'] = array(
    'title' => 'pattern voting link',
    'description' => 'pattern voting link',
    'page callback' => '_patterns_server_voting_pattern',
    'page arguments' => array(1),
    'access arguments' => array('view patterns server'),
  );

  //four basic list table page. they all use the core function "_patterns_server_list()";
  //these four:
  //  if success, return page which contains two parts: search form & a pattern table.
  //  if not, go to the main page and give an error message.
  $items['pattern/uploader/%'] = array(
    'title' => 'uploader \'s all pattern',
    'description' => 'all pattern files uploaded by user %',
    'page callback' => '_patterns_server_list_basicpage',
    'page arguments' => array(1, 2),
    'access arguments' => array('view patterns server'),
  );
  $items['pattern/category/%'] = array(
    'title' => 'all pattern in % category',
    'description' => 'all pattern files in % category',
    'page callback' => '_patterns_server_list_basicpage',
    'page arguments' => array(1, 2),
    'access arguments' => array('view patterns server'),
  );
  $items['pattern/author/%'] = array(
    'title' => 'all pattern belong to author %',
    'description' => 'all pattern belong to author %',
    'page callback' => '_patterns_server_list_basicpage',
    'page arguments' => array(1, 2),
    'access arguments' => array('view patterns server'),
  );
  $items['pattern/tags/%/%'] = array(
    'title' => 'all pattern with the tag %',
    'description' => 'all pattern with the tag %',
    'page callback' => '_patterns_server_list_basicpage',
    'page arguments' => array(2, 3),
    'access arguments' => array('view patterns server'),
  );

  //this is search function. search text & search type.
  //actually its result is composed by the above four basic kinds of table.
  $items['pattern/search/%/%'] = array(
    'title' => 'search pattern',
    'description' => 'search pattern with value/category, and so on',
    'page callback' => '_patterns_server_search',
    'page arguments' => array(2, 3),
    'access arguments' => array('view patterns server'),
  );

  //not quite sure.
  $items['pattern/alltags/%'] = array(
    'title' => 'all pattern with the tag % in all fields',
    'description' => 'all pattern with the tag % in all fields',
    'page callback' => '_patterns_server_list_tags_all',
    'page arguments' => array(2),
    'access arguments' => array('view patterns server'),
  );

  return $items;
}

/**
 * callback hook_menu() patterns_server_homepage
 * this is the main page, so I custom it. without using the _patterns_server_list().
 * this is considered with the efficient.
 * the page contain three part: search, most recent, most liked.
 */
function _patterns_server_all_list_page() {
  drupal_add_js(drupal_get_path('module', 'patterns_server') . '/styles/js/patterns_server.search.js');
  $searchform = drupal_get_form('patterns_server_search');
  $list = drupal_render($searchform);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'patterns_server')
    ->propertyOrderBy('created', 'DESC')
    ->execute();

  $list .= "<div id='patterns-server-all-table-wrap'>";
  $vscore = array();
  if (isset($query->ordered_results) && count($query->ordered_results)) {

    $ordered_results_backup = $query->ordered_results;

    //Most Recent Patterns.
    $query->ordered_results = array_slice($ordered_results_backup, 0, 10, TRUE);
    $fieldset_title = 'Most Recent Patterns:';
    $list .= _patterns_server_list_page($query, $fieldset_title);

    //Most Liked Patterns.
    foreach ($ordered_results_backup as $key => $value) {
      $vscore[$key] = _patterns_server_get_voting_score($value->entity_id);
    }
    arsort($vscore);
    $new_ordered_results = array();
    foreach ($vscore as $key => $value) {
      $new_ordered_results[] = $ordered_results_backup[$key];
    }
    $query->ordered_results = array_slice($new_ordered_results, 0, 10, TRUE);
    $fieldset_title = 'Most Liked Patterns:';
    $list .= _patterns_server_list_page($query, $fieldset_title);
  }
  else {
    drupal_add_js(drupal_get_path('module', 'patterns_server') . '/styles/js/patterns_server.firstpage.js');
    $list .= "<div class='patterns-server-list-table-wrap'>";
    $list .= "There is no pattern file in database.</br>Do you want to upload ";
    $list .= _patterns_server_upload_button();
    $list .= " ?";
    $list .= '<div id="patterns-server-upload-form-js" class="hero-unit"></div>';
    $list .= '</div>';
  }

  $list .= '</div>';
  return $list;
}

/**
 * callback hook_menu() for /pattern/pid
 */
function _patterns_server_view_page($pid) {
  $pe = entity_object_load($pid, 'patterns_server');
  if (!$pe) {
    drupal_set_message(t("The pattern file doesn't exist.", "error"));
    drupal_goto('patterns_server_homepage');
  }
  drupal_set_title($pe->title);
  $fieldset_title = $pe->title;

  drupal_add_css(drupal_get_path('module', 'patterns_server') . '/styles/css/patterns_server.viewpage.css');
  drupal_add_js(drupal_get_path('module', 'patterns_server') . '/styles/js/patterns_server.viewpage.js');

  $backtoserver_voting_link = _patterns_server_back_like_button($pid);
  $content = "<div id='one_pattern_div'><fieldset><legend>$fieldset_title$backtoserver_voting_link</legend><div class='fieldset-wrapper'>";

  $content .= _patterns_server_view_pattern_description($pe);

  $content .= '<div id="patterns-server-page-pattern-field"><ul>';
  $content .= _patterns_server_parser_field_pattern($pe->pattern);
  $content .= '</ul></div>';

  $content .= '</div></fieldset></div>';
  $field_view = entity_view('patterns_server', array($pid => $pe));
  $content .= drupal_render($field_view);

  return $content;
}

/**
 * callback hook_menu() pattern/pid/download
 */
function _patterns_server_download_pattern($pid) {
  $ety_obj = entity_object_load($pid, 'patterns_server');
  if (!$ety_obj) {
    drupal_set_message(t("The pattern file doesn't exist."), "error");
    drupal_goto('patterns_server_homepage');
  }
  $public_dir_path = variable_get('file_public_path', conf_path() . '/files');

  $file_path = $ety_obj->file_path;
  $file = file_get_contents($file_path);
  if (!$file) {
    return;
  }
  $downloads = $ety_obj->file_downloads + 1;
  db_update('patterns_server')
    ->condition('pid', $ety_obj->pid)
    ->fields(array('file_downloads' => $downloads))
    ->execute();
  drupal_add_http_header("Content-type", " text/plain; charset=utf-8");
  drupal_add_http_header("Content-Disposition", "attachment;filename=" . $ety_obj->file_name);
  print $file;
}

/**
 * callback hook_menu() four basic page.
 */
function _patterns_server_list_basicpage($property, $arg) {
  drupal_set_title($property . ': ' . $arg);

  drupal_add_js(drupal_get_path('module', 'patterns_server') . '/styles/js/patterns_server.search.js');
  $searchform = drupal_get_form('patterns_server_search');
  $searchform = drupal_render($searchform);

  $list = _patterns_server_list($property, $arg);
  if ($list === FALSE) {
    drupal_set_message(t("The pattern list doesn't exist."), "error");
    drupal_goto('patterns_server_homepage');
  }
  else {
    return $searchform . "<div id='patterns-server-all-table-wrap'>" . $list . "</div>";
  }

}

/**
 * callback hook_menu() alltags list
 */
function _patterns_server_list_tags_all($tid) {
  $tag_name = _patterns_server_tagname_by_tagid($tid);
  drupal_set_title(t("Patterns with tags: " . $tag_name['name']));

  drupal_add_js(drupal_get_path('module', 'patterns_server') . '/styles/js/patterns_server.search.js');
  $searchform = drupal_get_form('patterns_server_search');
  $list = drupal_render($searchform);

  $tags_fields_name = _patterns_server_get_all_taxonomyfields_name('patterns_server');

  if ($tags_fields_name === FALSE) {
    drupal_set_message(t("The pattern list doesn't exist.", "error"));
    drupal_goto('patterns_server_homepage');
  }

  $list .= "<div id='patterns-server-all-table-wrap'>";
  foreach ($tags_fields_name as $field_name) {
    $list .= _patterns_server_list($field_name, $tid);
  }
  $list .= "</div>";

  return $list;
}
